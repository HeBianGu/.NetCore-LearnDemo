// <auto-generated />
using System;
using HebianGu.Demo.EFCore.MoveDBForSQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HebianGu.Demo.EFCore.MoveDBForSQLite.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview6.19304.10");

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CDate");

                    b.Property<int>("Count");

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Citys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Count = 0,
                            Name = "成都"
                        },
                        new
                        {
                            Id = 5,
                            CDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Count = 0,
                            Name = "北京"
                        });
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Desk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Desks");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.LogBiochemicalEntiy", b =>
                {
                    b.Property<string>("BiochemicalID")
                        .HasColumnName("biochemical_id");

                    b.Property<string>("ALB")
                        .HasColumnName("alb");

                    b.Property<string>("ALT")
                        .HasColumnName("alt");

                    b.Property<string>("AST")
                        .HasColumnName("ast");

                    b.Property<string>("BUN")
                        .HasColumnName("bun");

                    b.Property<string>("FPG")
                        .HasColumnName("fpg");

                    b.Property<string>("GHB")
                        .HasColumnName("ghb");

                    b.Property<string>("GLU")
                        .HasColumnName("glu");

                    b.Property<string>("HB")
                        .HasColumnName("hb");

                    b.Property<string>("HDLC")
                        .HasColumnName("hdlc");

                    b.Property<string>("K")
                        .HasColumnName("k");

                    b.Property<string>("LDLC")
                        .HasColumnName("ldlc");

                    b.Property<string>("Na")
                        .HasColumnName("na");

                    b.Property<string>("PLT")
                        .HasColumnName("plt");

                    b.Property<string>("SCR")
                        .HasColumnName("scr");

                    b.Property<string>("SDB")
                        .HasColumnName("sdb");

                    b.Property<string>("TBIL")
                        .HasColumnName("tbil");

                    b.Property<string>("TC")
                        .HasColumnName("tc");

                    b.Property<string>("TG")
                        .HasColumnName("tg");

                    b.Property<string>("UMA")
                        .HasColumnName("uma");

                    b.Property<string>("WBC")
                        .HasColumnName("wbc");

                    b.HasKey("BiochemicalID");

                    b.ToTable("bhb_log_biochemical");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.LogOperateEntity", b =>
                {
                    b.Property<string>("OperateID")
                        .HasColumnName("operate_id");

                    b.Property<int>("BiochemicalCount")
                        .HasColumnName("biochemical_count");

                    b.Property<string>("BiochemicalID")
                        .HasColumnName("biochemical_id");

                    b.Property<string>("FailureCause")
                        .HasColumnName("failure_cause");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OperateAccount")
                        .HasColumnName("operate_account");

                    b.Property<DateTime>("OperateDate")
                        .HasColumnName("operate_date");

                    b.Property<bool>("OperateResult")
                        .HasColumnName("operate_result");

                    b.Property<string>("PersonID")
                        .HasColumnName("person_id");

                    b.HasKey("OperateID");

                    b.ToTable("bhb_log_operate");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.LogPersonEntity", b =>
                {
                    b.Property<string>("PersionID")
                        .HasColumnName("person_id");

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<int>("Age")
                        .HasColumnName("age");

                    b.Property<string>("CardID")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("HealthFormDate")
                        .HasColumnName("health_form_date");

                    b.Property<string>("HealthFormID")
                        .HasColumnName("health_form_id");

                    b.Property<string>("MemberTel")
                        .HasColumnName("tel");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("RegionCode")
                        .HasColumnName("region_code");

                    b.Property<byte>("Sex")
                        .HasColumnName("sex");

                    b.HasKey("PersionID");

                    b.ToTable("bhb_log_person");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.RelationShip", b =>
                {
                    b.Property<int>("ChildID");

                    b.Property<int>("ParentID");

                    b.HasKey("ChildID", "ParentID");

                    b.HasIndex("ParentID");

                    b.ToTable("RelationShips");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeskID");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DeskID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SchoolID");

                    b.HasKey("Id");

                    b.HasIndex("SchoolID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.RelationShip", b =>
                {
                    b.HasOne("HebianGu.Demo.EFCore.MoveDBForSQLite.Child", "Child")
                        .WithMany("RelationShips")
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HebianGu.Demo.EFCore.MoveDBForSQLite.Parent", "Parent")
                        .WithMany("RelationShips")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Student", b =>
                {
                    b.HasOne("HebianGu.Demo.EFCore.MoveDBForSQLite.Desk", "Desk")
                        .WithOne("Student")
                        .HasForeignKey("HebianGu.Demo.EFCore.MoveDBForSQLite.Student", "DeskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HebianGu.Demo.EFCore.MoveDBForSQLite.Teacher", b =>
                {
                    b.HasOne("HebianGu.Demo.EFCore.MoveDBForSQLite.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
